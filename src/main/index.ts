import * as TelegramBot from 'node-telegram-bot-api';
import {Message} from "node-telegram-bot-api";
import {IListDocument, IListModel} from "./models/list.types";
import {get} from "mongoose";

const TOKEN = '1327351227:AAE7TGQt5hKvuazXQQIbgL-hCfJmpU0QBKQ';
const kb = require('./keyboard-buttons');
const keyboard = require('./keyboard');
const bot = new TelegramBot(TOKEN, {
    polling: true
})
const listDbService = require('./services/ListDbService')

const ACTION_TYPE = {
    DELETE_LIST: 'dl',
    FIND_LIST: 'fl'
}
//==================================================

bot.onText(/\/start/, (msg: Message) => {
    const text = `–ü—Ä–∏–≤–µ—Ç, ${msg.from?.first_name}.\n` +
        `–Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –ø–æ–∫—É–ø–æ–∫. –í—ã–±–∏—Ä–µ—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π:`
    bot.sendMessage(msg.chat.id, text, {
        reply_markup: {
            keyboard: keyboard.home
        }
    })
})

bot.onText(/\/help/, (msg: Message) => {
    Help(msg.chat.id)
})

bot.onText(/\/addlist/, (msg: Message) => {
    addNewList(msg.chat.id);
})

bot.onText(/\/showlists/, (msg: Message) => {
    getLists(msg.chat.id)
})

bot.on('message', (msg: Message) => {
    switch (msg.text) {
        case kb.home.lists:
            getLists(msg.chat.id)
            break
        case kb.home.add_list:
            addNewList(msg.chat.id)
            break
        case kb.home.help:
            Help(msg.chat.id)
            break
        case kb.back:
            bot.sendMessage(msg.chat.id, '–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', {
                reply_markup: {keyboard: keyboard.home}
            })
            break
    }

})

bot.on('callback_query', query => {
    const userId = query.from.id;
    let data = JSON.parse(<string>query.data)
    const {type} = data;
    if (type === ACTION_TYPE.DELETE_LIST) {
        delList(userId, data.name);
    }
    if(type === ACTION_TYPE.FIND_LIST) {
        getList(data.id, userId);
    }
})

//================================

function Help(chatId: number) {
    const text = '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: \n' +
        'üóí –ú–æ–∏ —Å–ø–∏—Å–∫–∏ - /showlists - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø–æ–∫—É–ø–æ–∫\n' +
        '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ /addlist ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫\n' +
        'üñä –û—Ç–∑—ã–≤ /feedback - —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è—Ö\n' +
        '‚õî –°—Ç–æ–ø /stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –±–æ—Ç–∞'
    bot.sendMessage(chatId, text, {
        reply_markup: {
            keyboard: keyboard.help
        }
    })
}

function getLists(chatId: number) {
    const listQuery = listDbService.getLists(chatId);
    if (listQuery) {
        listQuery.then((listItems: IListDocument[]) => {
            const check = listItems.map((item: IListDocument) => {
                return `${item.name}`
            }).join('\n')
            if (!check) {
                const text = '–ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.\n' +
                    '–ò—Ö –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /addlist'
                bot.sendMessage(chatId, text)
            } else {
                bot.sendMessage(chatId, '–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏—Å–∫–∏', {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: listItems.map((item: IListDocument) => ([{
                            text: `${item.name} ‚ñ∂`,
                            callback_data: JSON.stringify({type: ACTION_TYPE.FIND_LIST, id: item.id})
                        }]))
                    }
                })
            }
        })
    }
}

function getList(listId: string, chatId: number) {
    const listQuery = listDbService.getList(listId, chatId);
    if (listQuery) {
        listQuery.then((listItem: IListDocument) => {
            if (listItem) {
                const products = listItem.products.map((l, i) => {
                    return `${i + 1}. ${listItem.products[i]}`
                }).join('\n');
                bot.sendMessage(chatId, `–°–ø–∏—Å–æ–∫ <b>"${listItem.name}"</b>\n${products}`, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: '‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫',
                                    callback_data: JSON.stringify({type: ACTION_TYPE.DELETE_LIST, name: listItem.name})
                                }
                            ]
                        ]
                    }
                })
            }
        })
    }
}

async function addList(chatId: number, listName: string, products: string[]): Promise<void> {
    let listItem = await listDbService.addList(chatId, listName, products);
    if (listItem) {
        bot.sendMessage(chatId, `–°–ø–∏—Å–æ–∫ <b>"${listName}"</b>`, {
            parse_mode: 'HTML',
            reply_markup: {keyboard: keyboard.home}
        })
    }

}

async function delList(chatId: number, listName: string) {
    let listItem = await listDbService.delList(chatId, listName);
    if (listItem) {
        bot.sendMessage(chatId, `–°–ø–∏—Å–æ–∫ <b>"${listName}"</b> —É–¥–∞–ª–µ–Ω.`, {
            parse_mode: 'HTML'
        })
    }
}

function addNewList(chatId: number) {
    const products = '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫.\n' +
        '\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤, –≤–≤–µ–¥–∏ –∏—Ö –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n' +
        '\n–•–ª–µ–±, —á–∞–π, –∫–æ—Ñ–µ, –º–∞–∫–∞—Ä–æ–Ω—ã'
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞:', {
        reply_markup: {remove_keyboard: true}
    }).then(() => {
        bot.once('text', (msg: Message) => {
                const listName = msg.text;
                if (listName)
                   bot.sendMessage(chatId, products).then(() => {
                       bot.once('text', (msg: Message) => {
                           const products = msg.text;
                           if (products) {
                               addList(chatId, listName, products.split(',').map(product => product.trim()));
                        }
                    });
                })
        })
    })
}
